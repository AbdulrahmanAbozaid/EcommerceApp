{
	"info": {
		"_postman_id": "4f98f33b-9e31-48bd-89f8-bd7193465614",
		"name": "Ecommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24172025"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Verify that _id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that firstName field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'lastName' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/*\r\n{\r\n    \"firstName\": \"Spektra\",\r\n    \"lastName\": \"Smith\",\r\n    \"userName\": \"speknkj\",\r\n    \"email\": \"spektrasmith@gmail.com\",\r\n    \"password\": \"SPektra83gjk\",\r\n    \"role\": \"admin\"\r\n}\r\n*/\r\n/*\r\n{\r\n    \"firstName\": \"Taha\",\r\n    \"lastName\": \"Hamdy\",\r\n    \"userName\": \"Thdas\",\r\n    \"email\": \"tahahamdy34@gmail.com\",\r\n    \"password\": \"SPektra83gjk\",\r\n    \"role\": \"seller\"\r\n}\r\n*/\r\n{\r\n    \"firstName\": \"Abdo\",\r\n    \"lastName\": \"Abouzaid\",\r\n    \"userName\": \"Abdo12\",\r\n    \"email\": \"diver72003@gmail.com\",\r\n    \"password\": \"SPektra83gjk\",\r\n    \"role\": \"customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/createUser",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"createUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ",
									"  const requiredFields = ['_id', 'firstName', 'lastName', 'userName', 'email', 'role', 'active', '__v', 'image'];",
									"  ",
									"  requiredFields.forEach(function(field) {",
									"    pm.expect(responseData[field]).to.exist;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Check if _id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    ",
									"    responseData.data.forEach(function(user) {",
									"        pm.expect(user._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU5OTlmZmUyODNmMWFjMTY5NGIyNiIsImVtYWlsIjoic3Bla3RyYXNtaXRoQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY5MTczMzIwNH0.YHy09JKc4LgHuaMOZ0XJTrVbtG7zTAjTQl_xtL3o3eQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/getAllUsers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"getAllUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Error message is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/getUserById/64af051f59e85d9b7d0b435e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"getUserById",
								"64af051f59e85d9b7d0b435e"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - error\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"newuserid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/updateUser/64af051f59e85d9b7d0b435e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"updateUser",
								"64af051f59e85d9b7d0b435e"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'error'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/deleteUser/64af08d48b8ca64e7b91809b",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"deleteUser",
								"64af08d48b8ca64e7b91809b"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.exist;",
									"  pm.expect(responseData.token).to.exist;",
									"  pm.expect(responseData.code).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Code is an integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.code).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Success is true\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"spektrasmith@gmail.com\",\r\n    \"password\": \"SPektra83gjk\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"First name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"lastName is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/auth/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NGM1OTk5ZmZlMjgzZjFhYzE2OTRiMjYiLCJlbWFpbCI6InNwZWt0cmFzbWl0aEBnbWFpbC5jb20iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2OTA2NzE1MTl9.FQRkVMKHf_i6sP7vo7IBUjoHHdiaywwgo432Ey5ZC6c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"auth",
								"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NGM1OTk5ZmZlMjgzZjFhYzE2OTRiMjYiLCJlbWFpbCI6InNwZWt0cmFzbWl0aEBnbWFpbC5jb20iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2OTA2NzE1MTl9.FQRkVMKHf_i6sP7vo7IBUjoHHdiaywwgo432Ey5ZC6c"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadImage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"The image size must be greater than zero\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data.image.size).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU5OTlmZmUyODNmMWFjMTY5NGIyNiIsImVtYWlsIjoic3Bla3RyYXNtaXRoQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY5MDY3MTcxNH0.ekBvQoxZ8L3Ir20r74e-pd0Rm0pBq2pOKCXz9q2vuxw",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "profileImage",
									"type": "file",
									"src": "/C:/Users/a/OneDrive/Pictures/Mine/IMG-20230509-WA0005.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/users/uploadImage/64c5999ffe283f1ac1694b26",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"uploadImage",
								"64c5999ffe283f1ac1694b26"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "createProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"The success field is present and has a value of true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist.and.to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Data field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.price).to.be.a('number');",
									"    pm.expect(responseData.price).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productName\": \"pro8\",\r\n    \"description\": \"this is a pro\",\r\n    \"price\": 99,\r\n    \"category\": \"cat0\",\r\n    \"availability\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/products/createProduct",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"createProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "listProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check if _id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"    ",
									"    responseData.data.forEach(function (product) {",
									"        pm.expect(product._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"productName is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (product) {",
									"        pm.expect(product.productName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"productName should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Description is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"No products found\");",
									"    ",
									"    responseData.data.forEach(function (product) {",
									"        pm.expect(product.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU5OTlmZmUyODNmMWFjMTY5NGIyNiIsImVtYWlsIjoic3Bla3RyYXNtaXRoQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY5MTczMzIwNH0.YHy09JKc4LgHuaMOZ0XJTrVbtG7zTAjTQl_xtL3o3eQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/products/listProducts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"listProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Validate the success field in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Validate the error field in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": \"45\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/products/updateProduct/64af09c88b8ca64e7b9180a0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"updateProduct",
								"64af09c88b8ca64e7b9180a0"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate success field is true\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Data field should be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/products/deleteProduct/64af0ae939585b4920da9cc8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"deleteProduct",
								"64af0ae939585b4920da9cc8"
							]
						}
					},
					"response": []
				},
				{
					"name": "get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"The success field should be true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Error field should be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/products/getProductById/64af0ae939585b4920da9cc8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products",
								"getProductById",
								"64af0ae939585b4920da9cc8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "createOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Shipping has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.shipping).to.be.an('object');",
									"    pm.expect(responseData.shipping.address).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.shipping.phone).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.shipping.city).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.shipping._id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"orderItems array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.orderItems).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.orderItems.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU5OTlmZmUyODNmMWFjMTY5NGIyNiIsImVtYWlsIjoic3Bla3RyYXNtaXRoQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY5MTczMzIwNH0.YHy09JKc4LgHuaMOZ0XJTrVbtG7zTAjTQl_xtL3o3eQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerID\": \"64af051f59e85d9b7d0b435e\",\r\n    \"orderStatus\": \"pending\",\r\n    \"shipping\": {\r\n        \"address\": \" fffraw\",\r\n        \"phone\": \"gewsgeds\",\r\n        \"city\": \"fgetgesd\"\r\n    },\r\n    \"totalPrice\": 1221,\r\n    \"orderItems\": [\r\n        {\r\n            \"productID\": \"64af0ae939585b4920da9cc8\",\r\n            \"quantity\": 2\r\n        },\r\n        {\r\n            \"productID\": \"64af0ba13ff074f5269e3507\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/orders/createOrder",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"createOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrderById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"orderStatus is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.orderStatus).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"orderStatus should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"orderItems is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.orderItems).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/orders/getOrderById/64af0d683ff074f5269e3518",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"getOrderById",
								"64af0d683ff074f5269e3518"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist;",
									"    pm.expect(responseData.code).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.error).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"64c5e1f2413084f20b8e0cc0\",\r\n    \"productId\": \"64af0ae939585b4920da9cc8\",\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cart/addToCart",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cart",
								"addToCart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has an error message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Verify the request URL\", function () {",
									"    pm.expect(pm.request.url).to.equal(\"http://localhost:3000/payment/createPayment\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerID\": \"64af051f59e85d9b7d0b435e\",\r\n    \"orderID\": \"64d5cfe1dbac72908d3f3c11\",\r\n    \"amount\": 900,\r\n    \"method\": \"paypal\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/payment/createPayment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"payment",
								"createPayment"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU5OTlmZmUyODNmMWFjMTY5NGIyNiIsImVtYWlsIjoic3Bla3RyYXNtaXRoQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY5MTczMzIwNH0.YHy09JKc4LgHuaMOZ0XJTrVbtG7zTAjTQl_xtL3o3eQ",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}